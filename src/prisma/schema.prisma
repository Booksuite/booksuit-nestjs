// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  email            String  @unique
  name             String
  surName          String?
  phone            String?
  password         String
  confirmationCode String?

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Guest {
  id Int @id @default(autoincrement())

  name  String
  email String
  phone String

  bookId Int?  @unique
  book   Book? @relation(fields: [bookId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("guests")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  users User[]

  createdAt DateTime @default(now())

  @@map("roles")
}

model Property {
  id               Int     @id @default(autoincrement())
  name             String
  slug             String  @unique
  shortDescription String?
  description      String? @db.LongText

  // guests
  avaiableGuests Int? @default(0)
  minGuests      Int? @default(1)
  maxGuests      Int? @default(1)
  maxAdults      Int? @default(0)
  maxChildren    Int? @default(0)

  // pricing
  weekdaysPrice      Float
  weekendPrice       Float
  extraAdultPrice    Float
  extraAdultPriceQtd Int

  banner   String?
  videoUrl String?

  addressId Int?     @unique
  address   Address? @relation(fields: [addressId], references: [id])
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])

  medias        PropertyMedia[]
  conveniences  PropertyConvenience[]
  rules         Rule?
  books         Book[]
  contact       Contact?
  paymentConfig PaymentConfig?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("properties")
}

model PropertyMedia {
  id    Int  @id @default(autoincrement())
  order Int? @default(0)

  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  mediaId    Int
  media      Media    @relation(fields: [mediaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property-medias")
}

model PropertyConvenience {
  id          Int      @id @default(autoincrement())
  isFeatured  Boolean? @default(false)
  isBed       Boolean? @default(false)
  bedQuantity Int?

  propertyId    Int
  property      Property    @relation(fields: [propertyId], references: [id])
  convenienceId Int
  convenience   Convenience @relation(fields: [convenienceId], references: [id])

  @@map("property-conveniences")
}

model Media {
  id    Int    @id @default(autoincrement())
  image String

  property         PropertyMedia[]
  extraMedias      ExtraMedia[]
  experienceMedias ExperienceMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medias")
}

model Convenience {
  id       Int                   @id @default(autoincrement())
  name     String
  property PropertyConvenience[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conveniences")
}

model Company {
  id Int @id @default(autoincrement())

  name             String
  slug             String  @unique
  shortDescription String?
  description      String? @db.LongText

  policy       String? @db.LongText
  cancelPolicy String? @db.LongText

  branchBusiness String?
  timezone       String?
  thumbnail      String?
  logo           String?
  logoFormat     String?
  favIcon        String?
  theme          String?

  responsible      String
  responsibleEmail String?
  responsiblePhone String?

  docType               String
  identification        String
  companyName           String
  stateRegistration     String?
  municipalRegistration String?
  address               String
  number                String
  country               String
  state                 String
  city                  String

  properties     Property[]
  cancelPolicies CancelPolicy[]
  agePolicies    AgePolicy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model Rule {
  id Int @id @default(autoincrement())

  checkIn       String
  checkOut      String
  minDaily      Int
  weekendNights Json?

  hostingSeason  String
  hosting        Json?
  hostingStartAt DateTime?
  hostingEndAt   DateTime?

  specificDays Boolean? @default(false)
  days         Json?

  propertyId Int      @unique
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rules")
}

model Policy {
  id Int @id @default(autoincrement())

  type        String?
  description String  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("policies")
}

model CancelPolicy {
  id Int @id @default(autoincrement())

  daysBeforeCheckIn Int
  penaltyBy         String
  value             Int

  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cancel_policies")
}

model AgePolicy {
  id Int @id @default(autoincrement())

  initialAge Int
  finalAge   Int
  chargeType String
  value      Int?

  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("age_policies")
}

model Address {
  id Int @id @default(autoincrement())

  zipCode       String?
  street        String
  number        String?
  country       String
  state         String
  city          String
  googleMapsUrl String?

  property Property?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Contact {
  id Int @id @default(autoincrement())

  email       Json?
  salesPhone  String?
  guestsPhone String?
  phone       String?
  cellphone   String?
  otherPhones Json?

  instagram         String?
  facebook          String?
  youtube           String?
  tiktok            String?
  tripAdvisor       String?
  otherSocialMedias Json?

  propertyId Int      @unique
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Category {
  id Int @id @default(autoincrement())

  name        String               @unique
  extras      ExtraCategory[]
  experiences ExperienceCategory[]
  taxes       TaxCategory[]
  offers      OfferCategory[]

  @@map("categories")
}

model Book {
  id Int @id @default(autoincrement())

  status      String
  startDate   DateTime
  endDate     DateTime
  totalDays   Int?     @default(1)
  adults      Int
  children    Int
  saleChannel String
  notes       String   @db.LongText

  propertyId  Int
  property    Property         @relation(fields: [propertyId], references: [id])
  guests      Guest?
  extras      BookExtra[]
  experiences BookExperience[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("books")
}

model BookExtra {
  id         Int   @id @default(autoincrement())
  qtd        Int   @default(1)
  totalPrice Float @default(0)

  extraId Int
  extra   Extra @relation(fields: [extraId], references: [id])
  bookId  Int
  book    Book  @relation(fields: [bookId], references: [id])

  @@map("book-extras")
}

model BookExperience {
  id         Int   @id @default(autoincrement())
  qtd        Int   @default(1)
  totalPrice Float @default(0)

  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id])
  bookId       Int
  book         Book       @relation(fields: [bookId], references: [id])

  @@map("book-experiences")
}

model Extra {
  id Int @id @default(autoincrement())

  name      String
  billType  String
  price     Float
  adults    Int
  minDaily  Int
  minNotice Int

  onlineSale   Boolean @default(false)
  panelSale    Boolean @default(false)
  seasonalSale Boolean @default(false)

  seasonStart DateTime
  seasonEnd   DateTime
  hosting     Json?
  nights      Json?

  description String  @db.LongText
  included    String  @db.LongText
  notes       String  @db.LongText
  videoUrl    String?

  categories  ExtraCategory[]
  medias      ExtraMedia[]
  books       BookExtra[]
  experiences ExperienceExtra[]
  offers      OfferExtraExperience[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("extras")
}

model ExtraCategory {
  id Int @id @default(autoincrement())

  extraId    Int?
  extra      Extra?   @relation(fields: [extraId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("extra-categories")
}

model ExtraMedia {
  id    Int  @id @default(autoincrement())
  order Int? @default(0)

  extraId Int
  extra   Extra @relation(fields: [extraId], references: [id])
  mediaId Int
  media   Media @relation(fields: [mediaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("extra-medias")
}

model ExperienceExtra {
  id  Int @id @default(autoincrement())
  qtd Int @default(1)

  extraId      Int
  extra        Extra      @relation(fields: [extraId], references: [id])
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id])

  @@map("experience-extras")
}

model Experience {
  id Int @id @default(autoincrement())

  name      String
  status    String?
  minDaily  Int
  minNotice Int

  onlineSale   Boolean @default(false)
  panelSale    Boolean @default(false)
  seasonalSale Boolean @default(false)

  seasonStart DateTime
  seasonEnd   DateTime
  hosting     Json?
  nights      Json?

  description String  @db.LongText
  notes       String  @db.LongText
  videoUrl    String?

  price           Float
  priceAdjustment String?
  discount        Float   @default(0)
  billType        String

  categories ExperienceCategory[]
  medias     ExperienceMedia[]
  extras     ExperienceExtra[]
  books      BookExperience[]
  offers     OfferExtraExperience[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("experiences")
}

model ExperienceCategory {
  id Int @id @default(autoincrement())

  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id])
  categoryId   Int
  category     Category   @relation(fields: [categoryId], references: [id])

  @@map("experience-categories")
}

model ExperienceMedia {
  id    Int  @id @default(autoincrement())
  order Int? @default(0)

  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id])
  mediaId      Int
  media        Media      @relation(fields: [mediaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("experience-medias")
}

model PaymentConfig {
  id Int @id @default(autoincrement())

  applicableTax       Float?
  guarantee           String?
  guaranteePercentage Float?

  pix         Boolean? @default(false)
  pixDiscount Float?   @default(0)

  creditCard      Boolean? @default(false)
  maxInstallments Int
  minInstallments Int?     @default(0)
  creditCardTax   Boolean? @default(false)
  installmentsTax Json?

  debitCard         Boolean? @default(false)
  debitCardDiscount Float?   @default(0)

  inCash         Boolean? @default(false)
  inCashDiscount Float?   @default(0)

  propertyId Int      @unique
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment-configs")
}

model Banner {
  id Int @id @default(autoincrement())

  status         String
  identification String
  position       String

  title            String
  description      String  @db.MediumText
  actionButton     String
  actionButtonText String?
  actionButtonLink String?

  bannerFormat   String
  bannerImage    String?
  bannerVideoUrl String?

  startAt DateTime
  endAt   DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("banners")
}

model Tax {
  id Int @id @default(autoincrement())

  name     String
  billType String
  price    Float

  includedItems Json
  nights        Json

  categories TaxCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("taxes")
}

model TaxCategory {
  id Int @id @default(autoincrement())

  taxId      Int
  tax        Tax      @relation(fields: [taxId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("taxes_categories")
}

model Offer {
  id Int @id @default(autoincrement())

  name        String
  description String?  @db.LongText
  startAt     DateTime
  endAt       DateTime
  hosting     Json?

  paymentTypes Json
  nights       Json

  priceVariationType String
  priceVariation     Float

  isFeatured      Boolean
  disccountTag    Boolean
  couponExclusive Boolean
  coupon          String?

  categories        OfferCategory[]
  extrasExperiences OfferExtraExperience[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offers")
}

model OfferCategory {
  id Int @id @default(autoincrement())

  taxId      Int
  tax        Offer    @relation(fields: [taxId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offers_categories")
}

model OfferExtraExperience {
  id Int @id @default(autoincrement())

  offerId      Int
  offer        Offer       @relation(fields: [offerId], references: [id])
  extraId      Int?
  extra        Extra?      @relation(fields: [extraId], references: [id])
  experienceId Int?
  experience   Experience? @relation(fields: [experienceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offers_extras_experiences")
}
